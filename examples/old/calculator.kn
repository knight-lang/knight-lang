; = isdigit BLOCK
	: & (< '/' chr) (< chr ':')
; = isspace BLOCK
	: | (? chr ' ') (? chr '	') # either a space or tab

; = parse BLOCK
	; = lhs + 0 expr
	; = expr ]expr # remove the first character, in case it's a hyphen
	; WHILE (; = chr [expr | (CALL isdigit) (CALL isspace))
		: | (= expr ]expr)
			; OUTPUT "expecting in put of the form NUM <op> NUM"
			: QUIT 1
	; = op [expr
	: = rhs +0 ]expr

; = eval BLOCK
	: OUTPUT (
		IF ? '+' op : + lhs rhs
		IF ? '-' op : - lhs rhs
		IF ? '*' op : * lhs rhs
		IF ? '/' op : / lhs rhs
		IF ? '%' op : % lhs rhs
		IF ? '^' op : ^ lhs rhs
		# ELSE:
		; OUTPUT ++ "unknown operator '" op "'"
		: QUIT 1
	)

; OUTPUT "enter an expression in the form 'NUM <op> NUM'"
; = expr PROMPT
; CALL parse
: CALL eval
