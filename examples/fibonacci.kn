# Recursive naive fibonacci. 

# Set the `fibonacci` variable to the given `BLOCK`. This is how Knight programs
# define their own "function"s, which are executed via the `CALL` function.
#
# Unlike functions in other languages, `BLOCK`s in Knight cannot be passed any
# arguments (which makes them dramatically more easy to implement), and Knight
# programs have to rely upon the caller setting variables before `CALL`ing them.
; = fibonacci BLOCK (
	IF (< n 2) (
		: n
	) (
		; = n - n 1

		# This uses the fact that Knight evaluates expressions in the order
		# they're encountered, so the `n` in `- n (; ...)` cannot be clobbered
		# by the `fibonacci` call.
		; = n - n (; (= tmp CALL fibonacci) 1)
		: + tmp CALL fibonacci
	)
)

; = n 15
: OUTPUT CALL fibonacci
