#!/bin/sh

# Support the user's preferred shell, which allows for timing mechanisms
if [ -z "$__TIMEKN_HAS_BEEN_RUN" ] && [ -n "$SHELL" ]; then
	__TIMEKN_HAS_BEEN_RUN=1 exec "$SHELL" -- "$0" "$@"
fi

# Safety first!
set -uf

# The name of the script: used in `die` and `usage` messages
readonly scriptname="${0##*/}"

# Print out a message with `$scriptname:` prepended before it, then exit.
die () {
	fmt="%s: $1\\n"
	shift
	printf >&2 "$fmt" "$scriptname" "$@"
	exit 1
}

# Print out the usage
shortusage () { cat; } <<SHORT_USAGE
usage: $scriptname [-ocvs] [-n count] [-k path] -e expr [--] [interpreter ...]
       $scriptname [-ocvs] [-n count] [-k path] -f path [--] [interpreter ...]
       $scriptname -h
SHORT_USAGE

usage () { cat; } <<USAGE
NAME
    $scriptname - time scripts/bootstrap.sh

SYNOPSIS
    $scriptname [-ocvs] [-n count] [-k path] -e expr [--] [interpreter ...]
    $scriptname [-ocvs] [-n count] [-k path] -[f path] [--] [interpreter ...]
    $scriptname -h ...

DESCRIPTION
	Wrapper around 'bootstrap.sh' that executes it \`count\` times and
	prints the execution duration. Used to time Knight implementations. By
	default, the output of 'bootstrap.sh' is surpressed, and any non-zero
	return statuses by it are. If no arguments are passed, defaults to the
	fibonacci program.

OPTIONS
    -h        Print out this message and exit.
    -n INT    Specify the amount of times to iterate. Defaults to 50.
    -o        Don't surpress the stdout of knight programs.
    -c        Continue even if a Knight implementation fails.
    -s        Ensure 'count' successful results happen. Implies '-c'
    -v        Print out each iteration as it happens.

the following are the same as bootstrap.kn

    -k PATH   sets the path to "knight.kn", overwriting the default \$KNIGHT_KN.
    -e VALUE  the knight program itself. Mutually exclusive with '-f'
    -f PATH   the path to the knight program. Mutually exclusive with '-e'


ENVIRONMENT
    \$SHELL   If set, this script is re-executed with \$SHELL, as its time
              mechanism might be different. (e.g. I like zsh's :-P).
    \$KNIGHT_KN   If set, used as the path to 'knight.kn'. See bootstrap-kn for
                  more details
USAGE

quiet=1
abort=1
count=50
verbose=
require_success=

# Forwarded to knight-kn
unset expr file knight_kn

while getopts ':hovcsn:k:e:f:' flag; do
	case $flag in
	h) usage; exit ;;
	o) quiet= ;;
	c) abort= ;;
	s) abort= require_success=1 ;;
	v) verbose=1 ;;
	n)
		case $OPTARG in
			*[!0-9]*) die 'count expects an integer'
		esac
		count=$OPTARG ;;
	k) knight_kn=$OPTARG ;;
	[ef])
		if [ -n "${expr+1}" ] || [ -n "${file+1}" ]; then
			die 'exactly one of -e or -f should be given'
		fi

		if [ $flag = e ]; then
			expr=$OPTARG
		else
			file=$OPTARG
		fi ;;
	:) die 'missing required argument for -%s' "$OPTARG"  ;;
	?) die 'unknown argument: -%s' "$OPTARG" ;;
	esac
done

set -e

## Delete the parsed arguments
[ -n "${ZSH_VERSION-}" ] && : $((OPTIND+=1)) # Bug with zsh?
shift $((OPTIND - 2))

# Have update the TIMEFMT to print out the name of knight, not of the program itself.
if [ -n "${ZSH_VERSION-}" ]; then
	eval "TIMEFMT=\${TIMEFMT/\%J/\${\${*:-\${KNIGHT:-./knight}}//\%/%%}}"
fi

if
	foo=${KNIGHT:-./knight}
	bar=${1:-$foo}
	! command -v "$bar" >/dev/null 2>&1
then
	die "cannot bootstrap, as the interpreter isn't executable: %s" "$1"
fi

enclosing_dir=$(dirname -- "$0" && printf x)
enclosing_dir=${enclosing_dir%?x}

# If neither -e nor -f were given, use fibonacci
if [ -z "${expr+1}" ] && [ -z "${file+2}" ]; then
	rootdir=$(dirname -- "$enclosing_dir" && printf x)
	file=${rootdir%?x}/examples/fibonacci.kn
fi

# Add in `bootstrap`'s arguments
set -- ${expr+-e"$expr"} ${file+-f"$file"} ${knight_kn+-k"$knight_kn"} -- "$@"

# Add bootstrap itself in
set -- "$enclosing_dir/bootstrap-kn" "$@"

################################################################################
#                             Make the Script Shim                             #
################################################################################

timescript=$(mktemp)

# Ensure `timescript` is removed when we exit
cleanup () { rm -f "$timescript"; }
trap cleanup EXIT
for signal in HUP INT QUIT TERM; do
	# shellcheck disable=SC2064
	trap "cleanup || :; trap - $signal EXIT; kill -s $signal $$" "$signal"
done

# If the script's quiet, have it redirect its stdout to `/dev/null`
[ -n "$quiet" ] && echo 'exec >/dev/null' >>$timescript

# If we're aborting on error, add the `abort` function, and export this script's
# name for the error message
if [ -n "$abort" ]; then
	export __TIMEKN_SCRIPT_NAME="$scriptname"
	cat <<'SHELL' >>$timescript
abort () {
	status=$?
	printf >&2 '%s: execution #%d failed with status %d\n' \
		"$__TIMEKN_SCRIPT_NAME" $1 $status
	exit $status
}
SHELL
fi

# Output the meat of the program into the script. Note that we've already done
# validation for `count` when it was assigned, so no need to quote it.
cat <<SHELL >>$timescript
i=0
while [ \$((i+=1)) -le $count ]
do
	${verbose:+printf >&2 'starting iteration % 3d/%d\n' \$i $count}
	"\$@" ${abort:+|| abort \$i} ${require_success:+|| i=\$((i-1))}
done
SHELL

################################################################################
#                             Run the Shim Script                              #
################################################################################

# Populate the command that `time` will use
set -- "$timescript" "$@"

# If `time` is not a builtin shell construct, ensure `--` is the first arg.
# (This is needed because in shells like bash or zsh, `time` is a keyword which
# doesn't support leading `--`s, whereas in dash `time` is the POSIX-required
# `time` program)
[ "$(command -v time)" != time ] && set -- -- "$@"

# Use `/bin/sh` instead of $SHELL to ensure we're executing the POSIX-compliant
# timescript program with a POSIX-compliant shell.
time /bin/sh "$@"
