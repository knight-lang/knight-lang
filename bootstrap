#!/bin/bash

# (This program is nearly 100% POSIX-compliant, except the very last line where
# we execute the program. Maybe one day the `< <(cat ...)` can be reworked to
# be POSIX-compliant.)

## Provides a nice interface for running `examples/knight.kn`.
# Even though `examples/knight.kn` fully implements the Knight specifications,
# it requires an interpreter to run, which is what all the different
# implementations supply. To make it easy to execute "knight in knight", this
# file is provided as a way to cleanly execute `examples/knight.kn`.
#
# Note that `bootstrap` will actually read all `-f`s itself, instead of
# deferring them to `examples/knight.kn`: This is because the Knight specs don't
# provide a way for Knight programs to access the file system, and thus this
# shim must do it.
#
# `examples/knight.kn` itself accepts programs in a "HEREDOC" format: it reads
# a single line from stdin, and then will read lines until it sees the exact
# same line again. This program does this for you, so you don't need to think
# about it. (The janky hack is required because the Knight specs don't support
# command-line arguments, so no `-e`, and because `knight.kn` should be able to
# support `PROMPT`, so we couldn't read to the very end either.)
##

# Safety first!
set -ufC

# The name of the script: used in `die` and `usage` messages
readonly scriptname=${0##*/}

# Used later on
readonly newline='
'

# Print out a message with `$scriptname:` prepended before it, then exit.
die () {
	fmt="%s: $1\\n"
	shift
	printf "$fmt" "$scriptname" "$@"
	exit 1
}

# Print out the usage
usage () { cat; } <<USAGE
usage: $scriptname [-i interpreter] [-k knight.kn] (-e expr | -f filename)
options:
	-h   prints out help and exits.
	-i   Specify the interpret to use. If omitted, "\$KNIGHT" is
	     used. If that's unset or empty, defaults to "./knight".
	-k   Specify where "knight.kn" can be found. Most users won't need this,
	     as the script usually deduces based on where bootstrap's located.
	-g   enable globbing for the interpreter.
	-e   (required by the Knight spec) The program to execute.
	-f   (required by the Knight spec) Same as '-e "\$(cat \$filename)"'
USAGE

################################################################################
#                            Command-line Arguments                            #
################################################################################

## Initial arguments
interpreter=${KNIGHT:-./knight}
knight_kn=
glob=
unset program # `unset` instead of empty string so we can tell if it was set.

while getopts 'hgi:f:k:e:' flag; do
	case $flag in
	g) glob=1 ;;
	h) usage; exit ;;
	i) interpreter=$OPTARG ;;
	k) knight_kn=$OPTARG ;;
	e) program=$OPTARG ;;
	f)
		program=$(cat -- "$OPTARG" && printf x) || \
			die "cannot read file: %s" "$OPTARG"
		# Ensure we give to Knight the exact program, including
		# any trailing newlines.
		program=${program%?x} ;;
	esac
done

################################################################################
#                              Validate Arguments                              #
################################################################################

# Since we don't want to do any manipulations of `program` so that `knight.kn`
# receives the entire program, we check for whether or not `program` is set, not
# if it's empty.
[ -z "${program+1}" ] && die 'one of -e or -f must be given'

# Default the interpreter if it's not already found.
[ -z "$interpreter" ] && interpreter=${KNIGHT:-./knight}

# Find the knight.kn path, which is what's going to happen the vast majority of
# the time. In that case, it's relative to this program.
if [ -z "$knight_kn" ]; then
	# We gotta do this trick in case the directory ends in a newline for
	# some bizarre reason.
	knight_root_dir=$(dirname -- "$0" && printf x) || {
		die 'cannot get enclosing directory of: %s' "$0"
	}
	knight_root_dir=${knight_root_dir%?x}

	# Ensure that `knight.kn` actually exists
	knight_kn=$knight_root_dir/examples/knight.kn
	if [ ! -f "$knight_kn" ]; then
		die "the default knight.kn doesn't exist: %s" "$knight_kn"
	fi
fi

################################################################################
#                            Find Unique EOF Marker                            #
################################################################################

# Because people calling this script might be nesting multiple Knight invocatio-
# ns themselves, this finds a unique string that can be used as the "heredoc"
# and is guaranteed not to already exist in the code.
iter=0
while
	# Use an `X` at the start to make it less likely that we'll get a match,
	# as `examples/knight.kn` doesn't used `X`.
	unique_string=X_END_OF_KNIGHT_PROGRAM_$iter

	case $program in
	*"${newline}${unique_string}${newline}"*) true ;;
	*) false
	esac
do
	iter=$((iter + 1))
done

################################################################################
#                             Execute the Program                              #
################################################################################
exec < <(cat <<PROGRAM; cat 2>&-
$unique_string
$program
$unique_string
PROGRAM
)

if [ -z "$glob" ]; then
	"$interpreter" -f "$knight_kn"
else
	$interpreter -f "$knight_kn"
fi
